PS_1:25:int_fac(int):public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }} => public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }}
PS_1:44:int_fac(int):public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }} => public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }}
PS_1:57:int_fac(int):public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;} => public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;}
PS_1:87:int_fac(int):/*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>1 && i<=n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }} => /*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>1 && i<=n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }}
PS_2:25:int_fac(int):public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }} => public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }}
PS_2:44:int_fac(int):public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }} => public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }}
PS_2:57:int_fac(int):public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;} => public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;}
PS_2:87:int_fac(int):/*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i==1 && i<=n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }} => /*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i==1 && i<=n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }}
PS_3:25:int_fac(int):public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }} => public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }}
PS_3:44:int_fac(int):public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }} => public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }}
PS_3:57:int_fac(int):public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;} => public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;}
PS_3:87:int_fac(int):/*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>=1 && i<n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }} => /*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>=1 && i<n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }}
PS_4:25:int_fac(int):public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }} => public static  boolean sorted( int[] a ){    if (a != null) {        if (a.length > 1) {            for (int i = 1; i < a.length; i++) {                if (a[i - 1] >= a[i]) {                    return false;                }            }            return true;        } else {            return true;        }    } else {        return false;    }}
PS_4:44:int_fac(int):public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }} => public static  boolean equal( char[] A, int begin, int end, char[] p ){    if (A != null && p != null && A.length > 0 && begin < end && begin >= 0 && end <= A.length) {        java.lang.String AAsString = "";        java.lang.String pAsString = "";        for (int i = begin; i < end; i++) {            AAsString += A[i];        }        for (int i = 0; i < p.length; i++) {            pAsString += p[i];        }        return AAsString.equals( pAsString );    } else {        return false;    }}
PS_4:57:int_fac(int):public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;} => public static  int pow( int a, int b ){    if (b == 0) {        return 1;    }    int res = a;    for (int i = 0; i < b - 1; i++) {        res *= a;    }    return res;}
PS_4:87:int_fac(int):/*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>=1 && i==n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }} => /*@	  @ public normal_behavior	  @ requires n==0;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n==1;	  @ ensures \result == 1;	  @ also	  @ public normal_behavior	  @ requires n>=2;	  @ ensures \result == (\product int i; i>=1 && i==n; i);	  @*/public static  int fac( int n ){    if (n == 0) {        return 1;    } else {        if (n == 1) {            return 1;        } else {            if (n >= 2) {                return n * fac( n - 1 );            } else {                return 1;            }        }    }}
